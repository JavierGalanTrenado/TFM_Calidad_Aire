library(rgdal)
library(sf)
rejilla_i <- as.data.frame(spsample(datos_max_oz, "regular", n=3190000))
View(estaciones)
datos_asociados <- merge(datos_max_oz,estaciones, by.x="ESTACION",by.y="CODIGO_CORTO")
coordxy <- datos_asociados[,c("LONGITUD","LATITUD")]
View(coordxy)
datos_asocidos_esp <- SpatialPointsDataFrame(coords = coordxy, data = datos_asociados,proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs"))
rejilla_i <- as.data.frame(spsample(datos_asocidos_esp, "regular", n=3190000))
rejilla_i <- as.data.frame(spsample(datos_asocidos, "regular", n=3190000))
View(datos_asociados)
datos_asocidos_esp <- SpatialPointsDataFrame(coords = coordxy, data = datos_asociados,proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs"))
View(coordxy)
coordxy['LONGITUD']<-as.numeric(unlist(coordxy['LONGITUD']))
View(coordxy)
coordxy <- datos_asociados[,c("LONGITUD","LATITUD")]
coordxy['LONGITUD']<-as.numeric((coordxy['LONGITUD']))
View(est)
coordxy ['LONGITUD']<-as.numeric(unlist(coordxy ['LONGITUD']))
coordxy <- datos_asociados[,c("LONGITUD","LATITUD")]
coordxy ['LONGITUD']<-as.numeric((coordxy ['LONGITUD']))
datos_asociados ['LONGITUD']<-as.numeric((datos_asociados['LONGITUD']))
datos_asociados <- merge(datos_max_oz,estaciones, by.x="ESTACION",by.y="CODIGO_CORTO")
## creamos rejilla
View(datos_asociados)
View(est)
datos_asociados <- merge(datos_max_oz,est, by.x="ESTACION",by.y="CODIGO_CORTO")
##
datos_asocidos_esp <- SpatialPointsDataFrame(coords = coordxy, data = datos_asociados,proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs"))
coordxy <- datos_asociados[,c("LONGITUD","LATITUD")]
datos_asocidos_esp <- SpatialPointsDataFrame(coords = coordxy, data = datos_asociados,proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs"))
rejilla_i <- as.data.frame(spsample(datos_asocidos, "regular", n=3190000))
rejilla_i <- as.data.frame(spsample(datos_asocidos_esp, "regular", n=3190000))
names(rejilla_i)<-c("X","Y")
coordinates(rejilla_i)<- c("X","Y")
gridded(rejilla_i) <- TRUE # crea objeto spatialpixel
fullgrid(rejilla_i) <- TRUE
proj4string(datos_asocidos_esp)<- proj4string(datos_asocidos_esp)
proj4string(rejilla_i)<-proj4string(datos_asocidos_esp)
library(gstat)# Use la rutina idw de gstat
library(sp)# Utilizado para la función spsample
library(raster)
interp <- idw ( max ~ 1,datos_asocidos_esp,newdata=rejilla_i, idp=2)
library(gstat)
install.packages("gstat")
library(gstat)
interp <- idw ( max ~ 1,datos_asocidos_esp,newdata=rejilla_i, idp=2)
library(gstat)
interp <- idw ( max ~ 1,datos_asocidos_esp,newdata=rejilla_i, idp=2)
library(gstat)
detach("package:gstat", unload = TRUE)
library(gstat)
idw
detach("package:gstat", unload = TRUE)
library(gstat)
library(gstat)
remove.packages("gstat")
install.packages("gstat")
library(gstat)# Use la rutina idw de gstat
library(gstat)
interp <- idw ( max ~ 1,datos_asocidos_esp,newdata=rejilla_i, idp=2)
library(raster)
unloadNamespace('raster')
unloadNamespace('terra')
unloadNamespace('mapview')
library(gstat
interp <- idw ( max ~ 1,datos_asocidos_esp,newdata=rejilla_i, idp=2)
interp <- idw ( max ~ 1,datos_asocidos_esp,newdata=rejilla_i, idp=2)
remove.packages("gstat")
install.packages("gstat")
library(gstat)
interp <- idw ( max ~ 1,datos_asocidos_esp,newdata=rejilla_i, idp=2)
library(gstat)
library(sp)
library(gstat)
library(raster)
interp <- idw ( max ~ 1,datos_asocidos_esp,newdata=rejilla_i, idp=2)
datos_r<- raster(interp)
plot(datos_r)
datos_r<- raster(interp)
datos_max<-datos_global[datos_global$ANO==2022,]
datos_max_oz<-datos_max[datos_max$MAGNITUD==6,]
plot(est$LONGITUD, est$LATITUD)
plot(est$LONGITUD, est$LATITUD,add=TRUE)
est
View(est)
datos_max_oz$ESTACION
datos_max_oz$ESTACION=="4"
datos_max_oz(datos_max_oz$ESTACION=="4")$media
datos_max_oz[datos_max_oz$ESTACION=="4",]
datos_max_oz[datos_max_oz$ESTACION=="4",]$media
estaciones_max <- est %>%
mutate("max" =max(datos_max_oz[datos_max_oz$ESTACION==est$CODIGO_CORTO,]$media))
estaciones_max <- datos_max_oz %>%
mutate("max" =max(datos_max_oz[datos_max_oz$ESTACION,]$media))
datos_max_oz<-datos_max_oz %>%
mutate("max" =max(datos_max_oz$media))
library(dplyr)
estaciones_max <- est %>%
mutate("max" =max(datos_max_oz[datos_max_oz$ESTACION==est$CODIGO_CORTO,]$media))
View(estaciones_max)
estaciones_max <- datos_max_oz %>%
mutate("max2" =max(datos_max_oz[datos_max_oz$ESTACION,]$media))
estaciones_max <- est %>%
mutate("max" =max(datos_max_oz[datos_max_oz$ESTACION,]$media))
View(est)
datos_max_oz[datos_max_oz$ESTACION=="4",]$media
est[1,]
View(est)
est[est$CODIGO_CORTO,]
View(est)
est[1]
est[1,]
est[1,]$CODIGO_CORTO
estaciones_max <- est %>%
mutate("max" =max(datos_max_oz[datos_max_oz$ESTACION==est[1,]$CODIGO_CORTO,]$media))
View(estaciones_max)
estaciones_max <- est %>%
mutate("max" =
for (l in 1:nrow(est))
{
max(datos_max_oz[datos_max_oz$ESTACION==est[l,]$CODIGO_CORTO,]$media)
}
)
View(estaciones_max)
View(est)
View(datos_max_oz)
maximo <-
for (l in 1:nrow(est))
{
max(datos_max_oz[datos_max_oz$ESTACION==est[l,]$CODIGO_CORTO,]$media)
}
)
for (l in 1:nrow(est))
{
maximo [l]<- max(datos_max_oz[datos_max_oz$ESTACION==est[l,]$CODIGO_CORTO,]$media)
}
maximo[2]
maximo[4]
nrow(est)
maximo<-NULL
for (l in 1:nrow(est))
{
maximo [l]<- max(datos_max_oz[datos_max_oz$ESTACION==est[l,]$CODIGO_CORTO,]$media)
}
(datos_max_oz[datos_max_oz$ESTACION==est[1,]$CODIGO_CORTO,]$media
(datos_max_oz[datos_max_oz$ESTACION==est[1,]$CODIGO_CORTO,]$media)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(estaciones)
runApp()
mapa_estaciones<-leaflet() %>%  addTiles() %>% setView( lng = -3.68444444,lat = 40.45861111, zoom =11)  %>%
addMarkers(lng =puntos2$V1,lat =puntos2$V2 , popup =puntos2$V4)
runApp()
runApp()
View(anyo23)
View(anyo23)
View(anyo23)
Y
length(Y)
runApp()
Y <- ts(datos_global_ozono[,"media"], start = c(2019,1), end = c(2022,12), frequency = 12)
Y
autoplot(Y) +
ggtitle("indice de ozono") +
ylab("magnitud")
descomp = decompose(Y)
autoplot(descomp)
adf.test(Y)
model <- auto.arima(Y, trace = T, stepwise = F, approximation =F, max.d = 0)
print(model)
checkresiduals(model)
mod1 <- forecast(model, 12, level = 95)
last_Y = Y[48]
plot(Y)
plot(mod1)
pron_real = (mod1) + last_Y
runApp()
runApp()
shiny::runApp()
plot(mod1)
mod1
print(mod1)
runApp()
descomp = decompose(Y_ARI)
plot(descomp)
runApp()
runApp()
runApp()
runApp()
lineas_est <-datos_global[datos_global$ANO=="2019" & datos_global$MAGNITUD=="4",]
lineas_est <-datos_global[datos_global$ANO=="2019" & datos_global$MAGNITUD==4,]
lineas_est <-datos_global[datos_global$ANO==2019 & datos_global$MAGNITUD==4,]
lineas_est <-datos_global[datos_global$ANO==2020 & datos_global$MAGNITUD==4,]
lineas_est <-datos_global[datos_global$ANO==2020 & datos_global$MAGNITUD==6,]
boxplot(lineas_est$media)
ggplot(lineas_est) + geom_line(aes(ESTACION, media, group = (ANO), color = ANO), alpha = 0.8)
#
shiny::runApp()
ggplot(lineas_est) + geom_line(aes(ESTACION, media, group = (ANO), color = ANO), alpha = 0.8)
#
ggplot(lineas_est) + geom_line(aes(ESTACION, media, group = (ESTACION), color = ANO), alpha = 0.8)
lilneas_est
lineas_est
barplot(lineas_est) + geom_line(aes(ESTACION, media, group = (ESTACION), color = ANO), alpha = 0.8)
barplot(lineas_est)
lineas_bar <- subset(lineas_est,mes,media)
lineas_bar <- subset(lineas_est,MES,media)
lineas_bar
lineas_bar <- subset(lineas_est,c(MES,media) )
lineas_bar <- linesa_est[c(MES,media)]
lineas_bar <- lineas_est[c(MES,media)]
lineas_bar <- lineas_est[c(MES,media)]
lineas_bar <- lineas_est[c(5,68)]
barplot(lineas_bar)
barplot(lineas_bar)
lineas_bar
lineas_bar <- as.data.frame(lineas_bar)
barplot(lineas_bar)
barplot(as.matrix(lineas_bar))
View(lineas_est)
nrow(lineas3)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
ggplot(data=lineas3, aes(x=MES, y=media,color=ANO))+geom_line(aes(linetype = variable)) + geom_point(colour="#000099") + geom_line(color=lineas3$ANO,size=2) +
labs(title="Variación valores a lo largo años",
subtitle="Hay estaciones que no recogen datos de algunas variables",
caption="Datos OPEN Data Madrid",
panel.grid.minor = element_blank(),
panel.background = element_blank(),
x="mes",
y="Valor")
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8)
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8) + scale_x_continuous(breaks = seq(1, 12, by = 1))
labels <- c("enero", "febrero", "marzo","abril","mayo","junio","julio","agosto","sept","oct","nov","dic")
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8) + scale_x_discrete(label = labels)
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8)+scale_x_continuous(breaks = seq(1, 12, by = 1)) + scale_x_discrete(label = labels)
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8)+scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels)
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8)+scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels) +  scale_y_continuous(sec.axis = sec_axis(trans = ~.* 2, name = "Título del eje Z"))
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8)+scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels) +   scale_y_continuous(sec.axis = sec_axis(trans = ~.* 2, name = "Título del eje Z")) scale_y_continuous(sec.axis = sec_axis(trans = ~.* 2, name = "Título del eje Z"))
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8)+scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels)
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8)+scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels) + geom_smooth(data = lineas3, aes(x = MES, y = 1* 2)) +
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8)+scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels) + geom_smooth(data = lineas3, aes(x = MES, y = 1* 2))
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8)+ + geom_smooth(data = lineas3, aes(x = MES, y = 1* 2))  +scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels)
ggplot(lineas3) + geom_line(aes(MES, media, group = (ANO), color = ANO), alpha = 0.8)+ scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels)
ggplot(lineas3) + geom_line(aes(MES, media, fill=ANO,group = (ANO), color = ANO), alpha = 0.8)+ scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels)
ggplot(lineas3) + geom_line(aes(MES, media, fill=ANO,  color = ANO), alpha = 0.8)+ scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels)
View(lineas3)
ggplot(lineas3) + geom_line(aes(MES, media,group = (ANO), color = ANO), alpha = 0.8)+ scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels) +guides(fill = guide_legend(title = "Título"))
ggplot(lineas3) + geom_line(aes(MES, media,group = (ANO), color = ANO), alpha = 0.8)+ scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels) + labs(fill = "Título")
ggplot(lineas3) + geom_line(aes(MES, media,group = (ANO), color = ANO), alpha = 0.8)+ scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels) + theme(legend.title = element_text(family = "Roboto",
ggplot(lineas3) + geom_line(aes(MES, media,group = (ANO), color = ANO), alpha = 0.8)+ scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels) + theme(legend.title = element_text(family = "Roboto",
color = "blue",
size = 10,
face = 2))
#+ scale_x_discrete(label = labels)
ggplot(lineas3) + geom_line(aes(MES, media,group = (ANO), color = ANO), alpha = 0.8)+ scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels) + theme(legend.title = element_text(family = "Roboto",color = "red", size = 10,face = 2))
ggplot(lineas3) + geom_line(aes(MES, media,group = (ANO), color = ANO), alpha = 0.8)+ scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels)
ggplot(lineas3) + geom_line(aes(MES, media,group = (ANO), color = ANO), alpha = 0.8)+theme(legend.title = element_text(family = "Roboto",color = "red", size = 10,face = 2))
estaciones
head(estaciones)
View(estaciones)
str(estaciones)
View(anyo21)
datos_global_ozono
View(datos_global_ozono2)
plot(datos_global_ozono2$media)
dygraph (datos_global_ozono2$media)
plot(datos_global_ozono2$media,datos_global_ozono2$ANO)
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("fecha" =  paste (datos_global_ozono2$MES, datos_global_ozono2$ANO))
shiny::runApp()
runApp()
runApp()
rlang::last_trace()
nrow(lineas3)
runApp()
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("fecha" =  paste (datos_global_ozono2$MES, datos_global_ozono2$ANO))
datos_global_ozono3 <- datos_global_ozono2[datos_global_ozono2$fecha > as.Date("2000-01-01"), ]
datos_global_ozono3 <- datos_global_ozono2[datos_global_ozono2$fecha > as.Date('2000-01-01'), ]
datos_global_ozono3 <- datos_global_ozono2[as.Date(datos_global_ozono2$fecha ,format="%d/%m/%Y"), ]
datos_global_ozono3
datos_global_ozono2
datos_global_ozono3 <- datos_global_ozono2[as.Date(datos_global_ozono2$fecha ,format="%m/%Y"), ]
datos_global_ozono3
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("fecha" =  as.Date(paste (datos_global_ozono2$MES, datos_global_ozono2$ANO)))
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("fecha" =  paste (datos_global_ozono2$MES, datos_global_ozono2$ANO))
datos_global_ozono2$fecha <- as.Date(datos_global_ozono2$fecha)
datos_global_ozono2$fecha <- as.Date("datos_global_ozono2$fecha")
dias2 = as.Date(datos_global_ozono2$fecha,format="%m/%Y")
dias2
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("fecha" =  paste (datos_global_ozono2$MES, datos_global_ozono2$ANO,sep = " _ "))
dias2 = as.Date(datos_global_ozono2$fecha,format="%m/%Y")
dias2
datos_global_ozono2$fecha <- as.Date(datos_global_ozono2$fecha)
datos_global_ozono2
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("fecha" =  paste (datos_global_ozono2$MES, datos_global_ozono2$ANO,sep = "_"))
datos_global_ozono2
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("fecha" =  paste (datos_global_ozono2$MES, datos_global_ozono2$ANO,sep = "-"))
dias2 = as.Date(datos_global_ozono2$fecha,format="%m/%Y")
datos_global_ozono2$fecha
as.Date(datos_global_ozono2$fecha)
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("fecha" =  paste (datos_global_ozono2$ANO, datos_global_ozono2$MES,sep = "-"))
as.Date(datos_global_ozono2$fecha)
dias2 = as.Date(datos_global_ozono2$fecha,format="%m/%Y")
datos_global_ozono2$fecha
as.Date(datos_global_ozono2$fecha[1])
datos_global_ozono2$fecha[1]
dias2 = as.Date(datos_global_ozono2$fecha[1],format="%Y/%m")
dias2
dias2 = as.Date(datos_global_ozono2$fecha[1],format="%Y-%m")
dias2
dias2 = as.Date(datos_global_ozono2$fecha[1],format="%y-%m")
dias2 = as.Date(datos_global_ozono2$fecha[1],format="%Y - %m")
dias2
dias2 = as.Date("2020-4",format="%Y - %m")
dias2 = as.Date("2020-4",format="%Y-%m")
dias2 = as.Date("2020/4",format="%Y/%m")
dias2 = as.Date("2020-4-15",format="%Y-%m-%d")
dias2 = as.Date("2020-4",format="%Y-%m-%d")
dias2 = as.Date("2020-4",format="%Y-%m")
library(zoo)
dias2 = as.yearmon("2020-4",format="%Y-%m")
dias2
datos_global_ozono2$fecha <- as.yearmon(datos_global_ozono2$fecha,format = "%Y-%m")
datos_global_ozono2
ggplot(datos_global_ozono2, aes(x = fecha, y = media)) +
geom_line() +
geom_point()
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("periodo" = ifelse(datos_global_ozono2$fecha >= "sept. 2021","360","false" ))
datos_global_ozono2
datos_global_ozono2$fecha[1]>"sept. 2021"
datos_global_ozono2$fecha[1]>as.yearmon("2021-09",format="%Y-%m")
datos_global_ozono2$fecha[1]<as.yearmon("2021-09",format="%Y-%m")
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("periodo" = ifelse(datos_global_ozono2$fecha >= as.yearmon("2021-09",format="%Y-%m"),"360","false" ))
datos_global_ozono2
ggplot(datos_global_ozono2, aes(x = fecha, y = media,color=periodo)) +
geom_line() +
geom_point()
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("periodo" = ifelse(datos_global_ozono2$fecha <= as.yearmon("2018-11",format="%Y-%m"),"Anterior" ))
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("periodo" = if(datos_global_ozono2$fecha <= as.yearmon("2018-11",format="%Y-%m"))
{"Anterior"} )
datos_global_ozono2
datos_global_ozono2<- datos_global_ozono2 %>%
mutate("periodo" = if(datos_global_ozono2$fecha <= as.yearmon("2018-11",format="%Y-%m"))
{"Anterior"}
if(datos_global_ozono2$fecha > as.yearmon("2018-11",format="%Y-%m"))
{"madrid"}
)
datos_global_ozono2
datos_global_ozono2<- datos_global_ozono2 %>%
mutate(
periodo = case_when(
datos_global_ozono2$fecha >= as.yearmon("2021-09",format="%Y-%m") ~ "",
TRUE ~ "aa"
)
)
datos_global_ozono2
datos_global_ozono2<- datos_global_ozono2 %>%
mutate(
periodo = case_when(
datos_global_ozono2$fecha >= as.yearmon("2021-09",format="%Y-%m") ~ "Madrid 360",
datos_global_ozono2$fecha < as.yearmon("2021-09",format="%Y-%m") & datos_global_ozono2$fecha >= as.yearmon("2018-11",format="%Y-%m") ~ "Madrid Central"
TRUE ~ "SIN PLAN CALIDAD"
)
)
datos_global_ozono2<- datos_global_ozono2 %>%
mutate(
periodo = case_when(
datos_global_ozono2$fecha >= as.yearmon("2021-09",format="%Y-%m") ~ "Madrid 360",
datos_global_ozono2$fecha < as.yearmon("2021-09",format="%Y-%m") & datos_global_ozono2$fecha >= as.yearmon("2018-11",format="%Y-%m") ~ "Madrid Central",
TRUE ~ "SIN PLAN CALIDAD"
)
)
ggplot(datos_global_ozono2, aes(x = fecha, y = media,color=periodo)) +
geom_line() +
geom_point()
runApp()
runApp()
runApp()
View(lineas3)
runApp()
runApp()
runApp()
shiny::runApp()
ggplot(data=lineas3, aes(x=MES, y=media,color=ANO))+geom_line(aes(linetype = variable)) + geom_point(colour="#000099") + geom_line(color=lineas3$ANO,size=2) +
labs(title="Variación valores a lo largo años",
subtitle="Hay estaciones que no recogen datos de algunas variables",
caption="Datos OPEN Data Madrid",
panel.grid.minor = element_blank(),
panel.background = element_blank(),
x="mes",
y="Valor")
ggplot(lineas3) + geom_line(aes(MES, media,group = (ANO), color = ANO), alpha = 0.8)+theme(legend.title = element_text(family = "Roboto",color = "red", size = 10,face = 2))
scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels)
pacman::p_load(plotly)
library(plotly)
pltly<-ggplot(lineas3) + geom_line(aes(MES, media,group = (ANO), color = ANO), alpha = 0.8)+theme(legend.title = element_text(family = "Roboto",color = "red", size = 10,face = 2))
scale_x_continuous(breaks = seq(1, 12, by = 1),labels = labels)
ggplotly(pltly)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
print(model)
checkresiduals(model)
s.plot(Y, pron_real_ts, lty = c(1,3), col = c(5,2))
ts.plot(Y, pron_real_ts, lty = c(1,3), col = c(5,2))
ggplotly(ts.plot(Y, pron_real_ts, lty = c(1,3), col = c(5,2)))
mod1
pron_real_ts
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplotly(plot(0:5, 0:5, type = "n", xlab = "", ylab = ""))
text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)
runApp()
gg<-plot(plot(0:5, 0:5, type = "n", xlab = "", ylab = ""))
text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)
plot(gg)
gg<-plot(plot(0:5, 0:5, type = "n", xlab = "", ylab = ""))
plot(plot(0:5, 0:5, type = "n", xlab = "", ylab = "")) text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)
(plot(0:5, 0:5, type = "n", xlab = "", ylab = "")) text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)
gg<-(plot(0:5, 0:5, type = "n", xlab = "", ylab = ""))
text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)
plot(gg)
gg<-(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = ""))
gg<-(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "",text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)))
plot(gg)
(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "",text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)))
(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "", text("no existe")) )
(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "", text(labels="h")) )
(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "", text(x,y =NULL, labels="h")) )
(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "", text(labels=gg)) )
(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "", labels=gg))
plot(x,y,",option1,")
(plot(0:5, 0:5,  xlab = "aa", ylab = "", labels=gg))
plot(gg)
print("hola")
ggplotly(print("hola"))
ggplotly(("hola"))
text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)
plot(x,y,",option1,")
(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "", labels=gg))
text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)
(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "", labels=gg))
gg<-text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)
ggplotly(plot(gg))
ggplotly((gg))
(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "", labels=gg))
gg<-text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)
ggplotly((gg))
ggplotly(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "", labels=gg))
ggplotly(plot(0:5, 0:5, type = "n", xlab = "aa", ylab = "", labels=gg))
text(2, 5, "   NO EXISTEN DATOS ",  col = "red", font = 6, cex = 1.5)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
autoplot(mod1)+autolayer(fitted(mod1), series="Ajuste")
runApp()
runApp()
print(mod1)
print(mod1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
